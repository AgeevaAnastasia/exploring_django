"""Представления

Представление в Django — это функция или класс, которая обрабатывает запрос и
возвращает ответ в виде HTTP-ответа. Оно определяет, какие данные будут
отображаться на странице и как они будут отображаться.

Представления распологаются в файле views.py вашего приложения. Если проект
состоит из нескольких приложений, каждое будет иметь свои “вьюшки” в
собственном каталоге.


Вместо старта

Если в рамках урока вы создаёте новое приложение, выполните команды:

>cd myproject
>python manage.py startapp myapp3

Сразу добавьте приложение в константу со списком приложений
INSTALLED_APPS = [
...
'myapp2',
'myapp3',
]



Представления на основе функций

Функциональное представление — это функция Python, которая принимает объект
запроса и возвращает объект ответа. Она может быть определена как обычная
функция или декоратор. Пример функционального представления:
from django.http import HttpResponse

def hello(request):
    return HttpResponse("Hello World from function!")


В этом примере мы импортируем класс HttpResponse из модуля django.http и
определяем функцию hello, которая принимает объект запроса request и
возвращает объект ответа HttpResponse с текстом "Hello, World!".



Представления на основе классов

Классовое представление – это класс Python, который наследуется от базового
класса View и реализует один или несколько методов для обработки запросов.

Пример классового представления:

from django.views import View
from django.http import HttpResponse


class HelloView(View):
    def get(self, request):
        return HttpResponse("Hello World from class!")


В этом примере мы импортируем базовый класс View из модуля django.views и
определяем класс HelloView, который наследуется от него. Метод get() класса
HelloView обрабатывает GET-запросы и возвращает объект ответа HttpResponse с
текстом "Hello, World!".

В Django существует множество других типов представлений, таких как шаблонные
представления, которые используют шаблоны HTML для отображения данных, или
API-представления, которые возвращают данные в формате JSON или XML. Однако
функциональные и классовые представления являются наиболее
распространенными и простыми в использовании.

Далее в рамках лекции будем использовать различные варианты представлений,
чтобы на примерах закрепить навыки по их созданию. В реальных проектах стоит
выбрать единую концепцию для всех представлений вашего проекта.


"""