"""Диспетчер URL


Диспетчер URL является одним из ключевых компонентов фреймворка Django,
который отвечает за обработку входящих запросов и направление их на
соответствующие обработчики.

Обработка запросов в Django осуществляется следующим образом: когда
пользователь делает запрос к веб-приложению, сервер Django получает этот запрос
и передает его диспетчеру URL. Диспетчер URL анализирует запрос и определяет,
какой обработчик должен быть вызван для его обработки.


Сопоставление представления с маршрутом

Использование представлений осуществляется путем указания их имени в
URL-адресе приложения. Например, для функционального представления hello() и
классового представления HelloView можно определить URL-шаблоны следующим
образом. Создаём файл urls.py в каталоге приложения и пишем код:

from django.urls import path
from .views import hello, HelloView

urlpatterns = [
path('hello/', hello, name='hello'),
path('hello2/', HelloView.as_view(), name='hello2'),
]


Здесь мы определяем URL-шаблоны для функционального представления hello() и
классового представления HelloView. В первом случае мы указываем имя функции в
качестве обработчика запроса, во втором – используем метод as_view() класса
HelloView для создания объекта-обработчика запроса.

Далее нам надо подключить маршруты приложения к маршрутам проекта.

Открываем urls.py в каталоге проекта и вносим в него изменения. Получим
примерно следующий код:

from django.contrib import admin
from django.urls import path, include
urlpatterns = [
path('admin/', admin.site.urls),
...
path('les3/', include('myapp3.urls')),
]


Добавляется маршрут для приложения myapp3, который будет обрабатывать
URL-адрес les3 в качестве префикса. В случае его совпадения передавать
управление в модуль myapp3.urls. Маршрут включается с помощью функции include,
а дальнейшая обработка адреса происходит в urls.py приложения. Его мы создали
парой абзацев выше.



Передача параметров

Преобразования пути — это процесс преобразования URL-адреса запроса в
формат, понятный для Django. Django преобразует пути запроса в параметры,
которые передаются обработчику. Рассмотрим пример кода в файле myapp3/urls.py:

from django.urls import path
...
from .views import year_post, MonthPost, post_detail
urlpatterns = [
...
path('posts/<int:year>/', year_post, name='year_post'),
path('posts/<int:year>/<int:month>/', MonthPost.as_view(), name='month_post'),
path('posts/<int:year>/<int:month>/<slug:slug>/', post_detail, name='post_detail'),
]

В этом примере мы определяем три маршрута для обработки запросов. В первом
маршруте мы используем параметр <int:year>, чтобы указать год статьи. Во втором
маршруте мы используем параметры <int:year> и <int:month>, чтобы указать год и
месяц статьи. В третьем маршруте мы используем параметры <int:year>,
<int:month> и <slug:slug>, чтобы указать год, месяц и уникальный идентификатор
статьи.


Когда пользователь делает запрос к веб-приложению, Django преобразует
URL-адреса запроса в параметры, которые передаются обработчику. Например,
если пользователь запрашивает статью, опубликованную в июне 2022 года с
идентификатором "python", Django преобразует URL-адрес запроса в следующие
параметры:

{
'year': 2022,
'month': 6,
'slug': 'python',
}

Эти параметры затем передаются обработчику views.post_detail, который может
использовать их для отображения соответствующей статьи.

Таким образом, диспетчер URL и преобразования пути являются важными
компонентами фреймворка Django, которые позволяют обрабатывать запросы и
направлять их на соответствующие обработчики.



Преобразование пути в типы Python

В Django преобразование путей осуществляется с помощью приставок, которые
определяют тип данных, который будет передаваться в качестве параметра в
представление. Для этого мы заключаем параметр в треугольные скобки и
указываем приставку, а далее после двоеточия слитно пишем имя параметра.

● str — приставка для передачи строки любых символов, кроме слэша.
Например, если мы хотим передать в представление информацию о
конкретном посте блога, то мы можем использовать такой путь:
path('posts/<str:slug>/', post_detail). Здесь slug - это строка символов, которая
является уникальным идентификатором поста.
● int — приставка для передачи целого числа. Например, если мы хотим
передать в представление информацию о конкретном пользователе по его
идентификатору, то мы можем использовать такой путь:
path('users/<int:id>/', user_detail). Здесь id - это целое число, которое является
уникальным идентификатором пользователя.
● slug — приставка для передачи строки, содержащей только буквы, цифры,
дефисы и знаки подчеркивания. Например, если мы хотим передать в
представление информацию о конкретной категории товаров, то мы можем
использовать такой путь:
path('categories/<slug:slug>/', category_detail). Здесь slug - это строка
символов, которая является уникальным идентификатором категории.
● uuid — приставка для передачи уникального идентификатора. Например, если
мы хотим передать в представление информацию о конкретном заказе, то мы
можем использовать такой путь:
path('orders/<uuid:pk>/', order_detail). Здесь pk - это уникальный
идентификатор заказа.
● path — приставка для передачи строки любых символов, включая слэши.
Например, если мы хотим передать в представление информацию о
конкретном файле на сервере, то мы можем использовать такой путь:
path('files/<path:url>/', file_detail). Здесь url - это строка символов, которая
содержит путь к файлу на сервере.
"""