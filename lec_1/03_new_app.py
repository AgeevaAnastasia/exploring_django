"""Создание первого приложения

Создание приложения в Django представляет собой создание отдельного
модуля, который будет содержать логику и шаблоны для определенной
функциональности. Для создания приложения нужно выполнить команду
"python manage.py startapp <app_name>", где <app_name> - название
приложения.

Пример:

python manage.py startapp myapp

Окончание app не является обязательным. Приложение может иметь любое
имя, которое отражает его назначение. Но наличии суффикса app позволяет
быстрее отличить пакет приложения от другого каталога внутри проекта.


Обзор структуры приложения

Структура проекта после создания приложения имеет следующий вид:

myproject/
     myapp/
        migrations/
            __init__.py
        __init__.py
         admin.py
         apps.py
         models.py
         tests.py
         views.py
     myproject/
         __init__.py
         settings.py
         urls.py
         asgi.py
         wsgi.py
     db.sqlite
     manage.py


Рассмотрим каждый из файлов:

● myapp/ - директория приложения
    ○ migrations/ - директория для хранения миграций базы данных
        ■ __init__.py - файл, указывающий на то, что директория является пакетом Python
    ○ __init__.py - файл, указывающий на то, что директория является пакетом Python
    ○ admin.py - файл для настройки административного интерфейса
    приложения
    ○ apps.py - файл для настройки приложения
    ○ models.py - файл, содержащий модели данных приложения
    ○ tests.py - файл для написания тестов приложения
    ○ views.py - файл, содержащий представления (views) приложения

● myproject/ - директория проекта
    ○ __init__.py - файл, указывающий на то, что директория является пакетом Python
    ○ settings.py - файл, содержащий настройки проекта
    ○ urls.py - файл, содержащий маршруты (routes) для обработки URLадресов
    ○ asgi.py - файл для запуска ASGI-сервера (Asynchronous Server Gateway Interface)
    ○ wsgi.py - файл для запуска WSGI-сервера (Web Server Gateway Interface)

● db.sqlite - файл базы данных SQLite
● manage.py - файл для управления проектом Django (запуск сервера, создание миграций и т.д.)


В процессе разработки приложения мы создадим ещё несколько файлов и
каталогов. В качестве спойлера, это будут:

● файл маршрутов (urls.py)
● каталог для файлы шаблонов (templates/)


Добавление приложения в проект

Чтобы добавить созданное приложение в проект, необходимо указать его в
настройках проекта (файл settings.py). Для этого нужно добавить название
приложения в список INSTALLED_APPS.

Внимание! Хорошей привычкой будет делать два действия сразу друг за
другом. А именно создавать приложение через startapp и сразу добавляет его в
список INSTALLED_APPS.

Учитывая добавленные по умолчанию приложения, константа INSTALLED_APPS
будет выглядет так:

INSTALLED_APPS = [
 'django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'myapp',
]

За что отвечают перечисленные в списке строки?
● django.contrib.admin - Сайт администратора.
● django.contrib.auth - Система аутентификации.
● django.contrib.contenttypes - Структура для типов контента.
● django.contrib.sessions - Структура сеанса.
● django.contrib.messages - Фреймворк обмена сообщениями.
● django.contrib.staticfiles - Фреймворк для управления статическими файлами.
● myapp - созданное вами приложение


Создание представления в приложении

Следующий пункт работы - создать представление. Так же их называют view
или просто “вьюшками”.

Для создания представления нужно определить функцию в файле views.py,
которая будет обрабатывать запрос на эту страницу. Пример кода:

from django.http import HttpResponse
def index(request):
    return HttpResponse("Hello, world!")
def about(request):
    return HttpResponse("About us")


Функция index принимает объект request, который содержит информацию о
запросе, и возвращает объект HttpResponse, который содержит ответ сервера.

В данном случае мы просто возвращаем текст "Hello, world!".

Вторая функция будет возвращать "About us". Пара простейших представлений
созданы. Но работать они пока не будут. Необходимо настроить маршруты.


Настройка путей

Для настройки URL в Django необходимо определить маршруты (routes),
которые будут связывать определенные URL с соответствующими
представлениями (views) в приложении. Маршруты определяются в файле
urls.py, который находится в корневой директории проекта и в директории
приложения.


Рассмотрим пример настройки URL в проекте:

Открываем файл urls.py в корневой директории проекта
Файл уже содержит комментарий с описанием трёх способов добавления
маршрутов:

● функции представления
● классы представления
● подключение других файлов с настройками URL

Сейчас нам нужен последний пункт. Пропишем добавление файла
конфигурации маршрутов из приложения myapp в проект.

from django.contrib import admin
from django.urls import path, include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]


Что делает этот код? Разберём построчно:

● Импортируется модуль admin из пакета django.contrib. С встроенной
админкой мы будем работать в рамках курса.
● Импортируется функция path и модуль include из пакета django.urls. Обе
функции нужны для формирования url адресов, на которые будет
отвечать сервер
● Создается список urlpatterns, который будет содержать маршруты
(routes) для обработки URL-адресов.
● Добавляется маршрут для административной панели Django, который
будет обрабатывать URL-адрес, начинающийся с префикса "admin/" и
передавать управление в модуль admin.site.urls.
● Добавляется маршрут для приложения myapp, который будет
обрабатывать пустой URL-адрес и передавать управление в модуль
myapp.urls. Маршрут включается с помощью функции include.


Мы добавили одну строку в список urlpatterns. Функция include указывает на
несуществующий файл urls.py в каталоге myapp. Если сейчас заглянуть в
консоль, работающий сервер сообщит об ошибке, например так:

ModuleNotFoundError: No module named 'myapp.urls'



Исправим ситуацию с ошибкой.

Создаем файл urls.py в директории приложения
Убедитесь, что вы создаёте файл внутри каталога myapp. Когда в вашем
проекте будет несколько приложений, каждое будет иметь собственный urls.py
с локальными маршрутами. А urls.py проекта будет включать (include()) их в
глобальный список адресов.

Внутри myapp/urls.py пропишем следующий код:

from django.urls import path
from . import views
urlpatterns = [
    path('', views.index, name='index'),
    path('about/', views.about, name='about'),
]

Импортируем уже знакомую функцию path и файл с представлениями из
текущего каталога (импорт через точку).

В данном примере мы определяем два маршрута: первый маршрут связывает
корневой URL с представлением index, а второй маршрут связывает URL
'/about/' с представлением about.

Функция path() принимает два аргумента: первый аргумент - это URL-адрес, а
второй - это представление, которое будет обрабатывать запрос на этот URL.

Также можно задать имя маршрута с помощью параметра name.

Таким образом, настройка URL в Django позволяет определить маршруты для
обработки запросов на определенные URL и связать их с соответствующими
представлениями.
"""