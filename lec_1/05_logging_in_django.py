"""Логирование в Django

Рассмотрим, что такое логирование, зачем оно нужно и как его настроить в
Django. Также мы рассмотрим примеры использования логирования в Django.
Что такое логирование и зачем оно нужно

Логирование - это процесс записи информации о работе приложения. Обычно
это запись в файлы. Хотя можно писать логи и в базы данных, и просто выводить
в консоль. Логи позволяют отслеживать работу приложения, выявлять ошибки
и проблемы, а также анализировать производительность приложения.


В Django логирование используется для записи информации о запросах,
ошибках, отладочной информации и т.д. Логи могут быть полезными для
разработчиков, чтобы быстро находить и исправлять ошибки, а также для
администраторов, чтобы отслеживать работу приложения и
производительность.


Важно!Django не изобретет логирование с нуля. Фреймворк использует модуль
logging из стандартной библиотеки Python. Всё, что вы знали о логировании в
Python актуально и для логирования в Django.



Конфигурация логирования в Django

Для настройки логирования в Django необходимо изменить файл settings.py. В
этом файле определяются параметры логирования, такие как уровень
логирования, формат вывода, место хранения логов и т.д .Конфигурация
логирования в файле settings.py в Django происходит через словарь LOGGING.


Вот пример настройки логирования:

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
    'console': {
    'class': 'logging.StreamHandler',
    },
    'file': {
         'class': 'logging.FileHandler',
         'filename': '/path/to/django.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}



Давайте рассмотрим каждый параметр:

● version: версия формата конфигурации логирования. В настоящее время
используется версия 1.
● disable_existing_loggers: если значение равно True, то все существующие
логгеры будут отключены. Если значение равно False, то существующие
логгеры будут продолжать работать.
● handlers: определяет, какие обработчики будут использоваться для
записи логов. Обработчики могут быть консольными или файловыми.
● loggers: определяет, какие логгеры будут использоваться для записи
логов. Логгеры могут быть определены для фреймворка Django или для
конкретного приложения.


Для каждого обработчика и логгера можно указать следующие параметры:

● class: класс, который будет использоваться для записи логов. В нашем
примере мы используем классы StreamHandler и FileHandler для записи
логов в консоль и файл соответственно.
● filename: путь к файлу, в который будут записываться логи. В нашем
примере мы записываем логи в файл /path/to/django.log.
Внимание! Каталог path/ и вложенный в него каталог to/ необходимо
создать самостоятельно. Либо исправьте значение на django.log, чтобы
создать файл логов в корневой директории проекта.
● level: минимальный уровень логирования, который будет записываться.


В нашем примере мы указали уровень INFO для логгера django и уровень
DEBUG для логгера myapp.

● propagate: если значение равно True, то сообщения будут передаваться
родительским логгерам. Если значение равно False, сообщения не будут
передаваться родительским логгерам.
После перезапуска сервера логирование начнёт работать в рамках Django.
Перейдите по существующим адресам. Теперь загляните в файл django.log и
сравните его содержимое с информацией в консоли.



Примеры использования логирования в Django

Для использования логирования в Django необходимо импортировать модуль
logging и создать объект логгера.

Пример двух view функций Django с использованием логирования:

import logging
from django.http import HttpResponse
logger = logging.getLogger(__name__)
def index(request):
    logger.info('Index page accessed')
    return HttpResponse("Hello, world!")
def about(request):
    try:
        # some code that might raise an exception
        result = 1 / 0
    except Exception as e:
        logger.exception(f'Error in about page: {e}')
        return HttpResponse("Oops, something went wrong.")
    else:
        logger.debug('About page accessed')
        return HttpResponse("This is the about page.")



В первой функции index мы просто записываем в лог информацию о том, что
страница была запрошена. Мы используем логгер info. Сообщение будет
выведено на консоль.

Во второй функции about мы используем логгер exception и debug. Если код
выполняется без ошибок, мы записываем в лог информацию о том, что
страница была запрошена. Если происходит ошибка, мы записываем в лог
информацию об ошибке с помощью метода exception, который автоматически
добавляет трассировку стека. Затем мы возвращаем пользователю сообщение
об ошибке.


Обратите внимание, что ошибки происходят внутри приложения myapp и не
сохраняются в файле логов. Наши настройки прописывают сохранение в файл
только логов уровня приложения. Поменяем местами параметр file:

        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'myapp': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },

Теперь мы видим логи уровня приложения и в консоли, и в файле.


Добавление форматирования в логи

Как и в случае со стандартным logging из Python мы можем прописать формат
вывода сообщений. Например такая строка добавляет вывод уровня
предупреждения и само сообщение

{'format': '%(levelname)s %(message)s'}

Очень напоминает старндартную работу с логированием, но через словарь.


Рассмотрим модификацию нашего словаря LOGGER с добавлением
форматированного вывода

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process} {thread} {message}',
            'style': '{',
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # добавлен параметр formatter
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': './log/django.log',
            'formatter': 'verbose', # добавлен параметр formatter
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'myapp': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


Ключ 'formatters' добавляет пару вариантов форматирования. При этом второй
вариант, simple использует классическую строку форматирования через %.
Первый вариант использует форматирование через фигурные скобки, что явно
прописано в паре 'style': '{',.

Далее мы используем созданные ранее обработчики console и file, но
добавляем в них строку 'formatter': 'verbose',. Теперь вывод логов происходит
по заданному нами формату.

Освежить знания по логированию вы всегда можете на странице официальной
документации Python https://docs.python.org/3/library/logging.html



Выводы о логировании

Логирование позволяет нам отслеживать работу приложения и находить
ошибки. Мы можем задавать различные уровни логирования для разных частей
приложения и выбирать, какие сообщения будут записываться в файл или
выводиться на консоль. Если происходит ошибка, мы можем быстро найти ее в
логах и исправить.

Логирование - это важный инструмент для отладки и анализа работы
приложения, поэтому рекомендуется использовать его в своих проектах. """