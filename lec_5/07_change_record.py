"""Настройка изменения отдельной записи

А теперь поговорим о возможностях модификации формы изменения объекта. В
нашем случае речь пойдёт о форме Продукт. Главой ранее мы пользовались её для
изменения существующих и добавления новых продуктов.


Отображение полей

Мы можем изменить порядок полей, скрыть некоторые из них или сделать их
неизменяемыми.

from django.contrib import admin
from .models import Category, Product

...
class ProductAdmin(admin.ModelAdmin):
'''Список продуктов.'''
    list_display = ['name', 'category', 'quantity']
...
    '''Отдельный продукт.'''
    fields = ['name', 'description', 'category', 'date_added', 'rating']
    readonly_fields = ['date_added', 'rating']


admin.site.register(Category)
admin.site.register(Product, ProductAdmin)


Новое поле fields определяет порядок вывода элементов формы. Если опустить
какие-то поля, они перестанут отображаться. Например мы больше не видим цену и
количество товара.

Переменная readonly_fields так же содержит список полей. Эти поля можно
просматривать, но нельзя изменять. Мы сделали неизменяемым рейтинг. Поле
'date_added' изначально было неизменяемым, так как дата проставялется
автоматически в момент создания записи. Подобное поведение мы указали в
модели:

...
date_added = models.DateTimeField(auto_now_add=True)
...

Если добавить дату добавления в fields, но не добавлять в readonly_fields, получим
ошибку вида FieldError:

'date_added' cannot be specified for Product model form as it is
a non-editable field. Check fields/fieldsets/exclude attributes
of class ProductAdmin.


Будьте внимательны при выводе полей. Редактируемое поле можно сделать
нередактируемым, добавив в readonly_fields список. Наоборот сделать не
получится.



Детальная настройка отображения полей

Если необходимо более индивидуально настроит отображение полей модели,
можно воспользоваться переменной fieldsets. Рассмотрим вариант представления,
который задействует максимум возможностей формы. В очередной раз изменяем
файл admin.py приложения:

from django.contrib import admin
from .models import Category, Product
...


class ProductAdmin(admin.ModelAdmin):
'''Список продуктов.'''
    list_display = ['name', 'category', 'quantity']
...

    '''Отдельный продукт.'''
    # fields = ['name', 'description', 'category', 'date_added', 'rating']
    readonly_fields = ['date_added', 'rating']
    fieldsets = [
        (
            None,
            {
                'classes': ['wide'],
                'fields': ['name'],
            },
        ),
        (
            'Подробности',
            {
                'classes': ['collapse'],
                'description': 'Категория товара и его подробное описание',
                'fields': ['category', 'description'],
            },
        ),
        (
            'Бухгалтерия',
            {
                'fields': ['price', 'quantity'],
            }
        ),
        (
            'Рейтинг и прочее',
            {
                'description': 'Рейтинг сформирован автоматически на основе оценок покупателей',
                'fields': ['rating', 'date_added'],
            }
        ),
    ]

admin.site.register(Category)
admin.site.register(Product, ProductAdmin)


Использование данного кода для класса ProductAdmin в админке Django приведет к
следующим изменениям в отображении формы:

● Поля "date_added" и "rating" отобразятся только для чтения, так как они будут
указаны в параметре readonly_fields.
● Все поля будут разбиты на четыре группы (fieldset):
○ Первая группа будет содержать только поле "name", она будет иметь
класс "wide", что означает, что она будет занимать все доступное место
на странице.
○ Вторая группа будет содержать поля "category" и "description", они
будут скрыты по умолчанию (класс "collapse"), но можно будет
развернуть эту группу, нажав на соответствующий заголовок. Под
заголовком отобразится описание группы.
○ Третья группа будет содержать поля "price" и "quantity". Они выводятся
в одну строку, потому что переданы как элемент кортежа.
○ Четвертая группа будет содержать поля "rating" и "date_added", она
также содержит описание, которое будет отображаться под
заголовком.


Таким образом, форма будет иметь более структурированный и четкий вид, что
упростит ее использование для администраторов.

Как вы видите, административная панель Django обладает достаточно широким
набором инструментов. Часть из них позволяют пользоваться админкой написав
минимум строк кода. Другая позволяет активно изменять и настраивать админ
панель под любые нужды."""