"""Введение в модели Django

Django - это популярный веб-фреймворк, который позволяет разрабатывать
мощные и масштабируемые веб-приложения. Одной из ключевых функций
Django являются модели, которые обеспечивают удобный способ работы с
базами данных.

Модели в Django - это классы Python, которые определяют структуру таблиц
базы данных. Каждый атрибут класса соответствует полю таблицы, а
экземпляры класса представляют записи в таблице. Django использует ORM
(Object-Relational Mapping), чтобы автоматически создавать SQL-запросы для
работы с базой данных.


Зачем нужны модели?

Модели в Django обеспечивают удобный способ работы с базами данных. Они
позволяют создавать, изменять и удалять записи в базе данных без
необходимости написания SQL-запросов. Кроме того, модели позволяют
описывать отношения между таблицами, что делает работу с базой данных
еще более удобной и эффективной.

Примеры использования моделей в Django могут включать создание блогов,
интернет-магазинов, социальных сетей и других приложений, которые
требуют хранения и обработки большого количества данных.

Далее мы рассмотрим, как создавать и использовать модели в Django, а также
как работать с данными в базе данных.


Определение моделей

Рассмотрим, как определять модели в Django. Для начала нам нужно создать
новый проект Django (или продолжить работу в старом учебном проекте).
Далее создадим новое приложение внутри проекта. Подобным мы занимались
на прошлом занятии Напомним, что это можно сделать с помощью следующих
команд:

django-admin startproject myproject
cd myproject
python manage.py startapp myapp2

Здесь мы создаем проект с именем "myproject" и приложение с именем
"myapp2". После этого мы можем приступить к созданию модели.

Внимание! Для каждого занятия будет создаваться новое приложение:
myapp2, myapp3 и т.д. В реальной разработке приложения делят проект на
логические блоки, а не на итерации разработки.

Важно! Обязательно подключите ваше приложение в настройках проекта.

INSTALLED_APPS = [
...
'myapp',
'myapp2',
]
"""